name: Test urunc deploy
on:
  workflow_call:
    inputs:
      runner:
        type: string
        default: '["base", "dind", "2204"]'
      runner-archs:
        type: string
        default: '["amd64", "arm64"]'
      runner-arch-map:
        type: string
        default: '[{"amd64":"x86_64", "arm64":"aarch64", "arm":"armv7l"}]'
    secrets:
      GIT_CLONE_PAT:
        required: false

  workflow_dispatch:
  
env:
  SSH_USER: 'incus-ci'
  SSH_KEY: '${{ secrets.INCUS_ID_ED25519 }}'
  INCUS_CLUSTER: 'nbfc'
  INCUS_PROJECT: 'nbfc-ci'
  VM_NAME: 'test-vm'
  INCUS_NAME: '${{ github.event.repository.name }}-${{ github.run_id }}-${{ github.run_attempt }}'

jobs:
  test:
    name: urunc-deploy
    runs-on: ${{ format('{0}-{1}', join(fromJSON(inputs.runner), '-'), matrix.archconfig) }}
    strategy:
      matrix:
        archconfig: ["${{ fromJSON(inputs.runner-archs) }}"]
      fail-fast: false
    steps:
    - name: Generate Names
      id: generate-names
      uses: boonya/gh-action-name-generator@v1
      with:
        separator: '-'
        length: 2
        style: 'lowerCase'

    - name: Set VM image
      id: set-vm-image
      run: |
        ARCHITECTURE=$(uname -m)
        echo "Current architecture: $ARCHITECTURE"

        ID=$(date +%s%N | sha256sum | head -c 12)
        echo "UNIQ_ID=$ID" >> $GITHUB_ENV

        if [[ "$ARCHITECTURE" == "x86_64" ]]; then
          IMAGE='nbfc:f4e9e1e4859e'
          TARGET='@amd64'
        elif [[ "$ARCHITECTURE" == "aarch64" ]]; then
          IMAGE='nbfc:71b1bb3aa205'
          TARGET='@arm64'
        else
          echo "Unknown architecture: $ARCHITECTURE"
        fi
        echo "INCUS_IMAGE=${IMAGE}" >> $GITHUB_ENV
        echo "INCUS_TARGET=${TARGET}" >> $GITHUB_ENV
        echo "VM_NAME=${{ github.event.repository.name }}-urunc-deploy-${{ steps.generate-names.outputs.name }}" >> $GITHUB_ENV

    - name: Setup Incus remote
      uses: nubificus/incus-remote-setup-action@5580bf31df021cd6cf3266c4383a8ccb448ed7f9
      with:
        ssh_user: ${{ env.SSH_USER }}
        ssh_key: ${{ secrets.INCUS_ID_ED25519 }}
        remote_host: ${{ secrets.INCUS_IP_ADDR }}
        friendly_name: ${{ env.INCUS_CLUSTER }}
        incus_client_name: '${{ env.INCUS_NAME }}-${{ env.UNIQ_ID }}'
        cleanup: false
    
    - name: Launch VM
      id: launch-vm
      uses: nubificus/incus-launch-vm-action@00e5e2f420e7377f1be706c4546aeb9365169dd7
      with:
        vm_name: '${{ env.VM_NAME }}'
        vm_description: 'CI VM for ${{ github.event.repository.name }} for PR ${{ github.event.pull_request.number }} end-to-end testing'
        incus_remote: ${{ env.INCUS_CLUSTER }}
        incus_image: ${{ env.INCUS_IMAGE }}
        cpu_cores: '4'
        memory: '4' # size in GiB
        disk_size: '20' # size in GiB
        incus_profile: 'urunc-ci'
        incus_project: ${{ env.INCUS_PROJECT }}
        incus_target: ${{ env.INCUS_TARGET }}
        cleanup: 'true'
        snapshot: 'false'

    - name: Install and configure k3s with Calico and urunc
      run: |
        retry() {
          desc="$1"
          shift
          for i in {1..10}; do
            echo "[$desc] Attempt $i..."
            "$@" && break || sleep $((i * 2))
          done
        }

        export VM_NAME="${{ env.INCUS_CLUSTER }}:${{ env.VM_NAME }}"
        export INCUS_RUN="incus exec $VM_NAME --project ${{ env.INCUS_PROJECT }} -- sh -c "

        retry "Prepare VM" $INCUS_RUN 'sudo apt-get update && apt-get install -y curl wget'

        retry "Install k3s" $INCUS_RUN "curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC='--flannel-backend=none ' sh -s - --disable-network-policy --disable servicelb --disable metrics-server --cluster-cidr 10.244.32.0/19 --service-cidr 10.244.0.0/19"

        $INCUS_RUN "kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.28.0/manifests/tigera-operator.yaml"
        $INCUS_RUN "wget https://raw.githubusercontent.com/projectcalico/calico/v3.28.0/manifests/custom-resources.yaml"
        $INCUS_RUN "wget -q https://github.com/mikefarah/yq/releases/download/v4.43.1/yq_linux_${{ matrix.archconfig }} -O /usr/bin/yq && chmod +x /usr/bin/yq"
        $INCUS_RUN "sed -i.bak 's|192.168.0.0/16|10.244.32.0/19|g' custom-resources.yaml"
        $INCUS_RUN "yq eval 'select(.kind == \"Installation\").spec.registry = \"harbor.nbfc.io\"' -i custom-resources.yaml"
        $INCUS_RUN "yq eval 'select(.kind == \"Installation\").spec.imagePath = \"proxy_cache/calico\"' -i custom-resources.yaml"

        retry "Apply Calico custom resources" $INCUS_RUN "kubectl apply -f custom-resources.yaml"
        retry "Wait for tigera-operator pods" $INCUS_RUN "kubectl wait --for=condition=Ready pods --all -n tigera-operator --timeout=300s"
        retry "Wait for calico-system pods" $INCUS_RUN "kubectl wait --for=condition=Ready pods --all -n calico-system --timeout=300s"
        retry "Wait for calico-apiserver pods" $INCUS_RUN "kubectl wait --for=condition=Ready pods --all -n calico-apiserver --timeout=300s"

        # Install urunc
        $INCUS_RUN "kubectl apply -f https://raw.githubusercontent.com/nubificus/urunc/main/deployment/urunc-deploy/urunc-rbac/urunc-rbac.yaml"
        retry "Deploy urunc" $INCUS_RUN "kubectl apply -k https://github.com/nubificus/urunc//deployment/urunc-deploy/urunc-deploy/overlays/k3s?ref=main"
        retry "Wait for urunc-deploy pods" $INCUS_RUN "kubectl -n kube-system wait --timeout=200s --for=condition=Ready -l name=urunc-deploy pod"

        # Check deployment
        retry "Check pods" $INCUS_RUN "kubectl get pods -A -o wide"
        retry "Check nodes" $INCUS_RUN "kubectl get nodes --show-labels"

        retry "Apply urunc runtimeclass" $INCUS_RUN "kubectl apply -f https://raw.githubusercontent.com/nubificus/urunc/refs/heads/main/deployment/urunc-deploy/runtimeclasses/runtimeclass.yaml"


