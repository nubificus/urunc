name: custom VM spawner 
on:
  workflow_call:
    inputs:
      ref:
        type: string
        default: ''
      runner:
        type: string
        default: '["base", "dind", "2204"]'
      runner-archs:
        type: string
        default: '["amd64"]'
      runner-arch-map:
        type: string
        default: '[{"amd64":"x86_64", "arm64":"aarch64", "arm":"armv7l"}]'
    secrets:
      GIT_CLONE_PAT:
        required: false

  workflow_dispatch:
  
env:
  SSH_USER: 'incus-ci'
  SSH_KEY: '${{ secrets.INCUS_ID_ED25519 }}'
  INCUS_CLUSTER: 'nbfc'
  INCUS_PROJECT: 'nbfc-ci'
  VM_NAME: 'test-vm'
  INCUS_NAME: '${{ github.event.repository.name }}-${{ github.run_id }}'

jobs:
  prepare:
    name: VM test
    runs-on: ${{ format('{0}-{1}', join(fromJSON(inputs.runner), '-'), matrix.archconfig) }}
    strategy:
      matrix:
        archconfig: ["${{ fromJSON(inputs.runner-archs) }}"]
      fail-fast: false
    steps:
    - name: Setup Incus remote
      uses: nubificus/incus-remote-setup-action@v2
      with:
        ssh_user: ${{ env.SSH_USER }}
        ssh_key: ${{ secrets.INCUS_ID_ED25519 }}
        remote_host: ${{ secrets.INCUS_IP_ADDR }}
        friendly_name: ${{ env.INCUS_CLUSTER }}
        incus_client_name: '${{ env.INCUS_NAME }}'
        cleanup: false
    
    - name: Generate Names
      id: generate-names
      uses: boonya/gh-action-name-generator@v1
      with:
        separator: '-'
        length: 2
        style: 'lowerCase'

    - name: Set ref and repo from PR or dispatch
      id: set-ref
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" || "${{ github.event_name }}" == "pull_request_target" ]]; then
          echo "ref=${{ github.event.pull_request.head.ref }}" >> "$GITHUB_OUTPUT"
          echo "repo=${{ github.event.pull_request.head.repo.full_name }}" >> "$GITHUB_OUTPUT"
          echo "vmnamestr=pr${{ github.event.pull_request.number }}" >> "$GITHUB_ENV"
        else
          echo "ref=${{ github.ref_name }}" >> "$GITHUB_OUTPUT"
          echo "repo=${{ github.repository }}" >> "$GITHUB_OUTPUT"
          echo "vmnamestr=manual" >> "$GITHUB_ENV"
        fi

    - name: Set VM name
      id: set-vm-name
      run: |
        echo "VM_NAME=${{ github.event.repository.name }}-${{ env.vmnamestr }}-${{ steps.generate-names.outputs.name }}" >> $GITHUB_ENV

    - name: Launch VM
      id: launch-vm
      uses: nubificus/incus-launch-vm-action@00e5e2f420e7377f1be706c4546aeb9365169dd7
      with:
        vm_name: '${{ env.VM_NAME }}'
        vm_description: 'CI VM for ${{ github.event.repository.name }} for PR ${{ github.event.pull_request.number }} end-to-end testing'
        incus_remote: ${{ env.INCUS_CLUSTER }}
        incus_image: '${{ env.INCUS_CLUSTER }}:jammy-urunc-ci-template'
        cpu_cores: '3'
        memory: '3' # size in GiB
        disk_size: '20' # size in GiB
        incus_profile: 'urunc-ci'
        incus_project: ${{ env.INCUS_PROJECT }}
        incus_target: '@amd64'
        cleanup: 'true'
        snapshot: 'false'
  
    - name: Install urunc
      id: install-urunc
      run: |
        export VM_NAME="${{ env.INCUS_CLUSTER }}:${{ env.VM_NAME }}"
        export INCUS_RUN="incus exec $VM_NAME --project ${{ env.INCUS_PROJECT }} -- sh -c "
        $INCUS_RUN "rm -f /usr/local/bin/urunc"
        $INCUS_RUN "wget https://s3.nbfc.io/nbfc-assets/github/urunc/dist/${{ steps.set-ref.outputs.ref }}/amd64/containerd-shim-urunc-v2_static_amd64"
        $INCUS_RUN "wget https://s3.nbfc.io/nbfc-assets/github/urunc/dist/${{ steps.set-ref.outputs.ref }}/amd64/urunc_static_amd64"
        $INCUS_RUN "chmod +x urunc_static_amd64"
        $INCUS_RUN "chmod +x containerd-shim-urunc-v2_static_amd64"
        $INCUS_RUN "mv urunc_static_amd64 /usr/local/bin/urunc"
        $INCUS_RUN "mv containerd-shim-urunc-v2_static_amd64 /usr/local/bin/containerd-shim-urunc-v2"
        $INCUS_RUN "urunc --version"
        $INCUS_RUN "git clone https://github.com/${{ steps.set-ref.outputs.repo }} -b ${{ steps.set-ref.outputs.ref }} /root/develop/urunc"


    - name: Run ctr tests
      id: test-ctr
      run: |
        export VM_NAME=${{ env.INCUS_CLUSTER }}:${{ env.VM_NAME }}
        export TEST_CMD="cd /root/develop/urunc && PATH=/usr/local/go/bin:$PATH make test_ctr"
        if ! incus exec "$VM_NAME" --project ${{ env.INCUS_PROJECT }} -- sh -c "$TEST_CMD"; then
          echo "Test failed"
          echo "CLEANUP_OVERRIDE=false" >> $GITHUB_ENV
          exit 1
        fi

    - name: Run nerdctl tests
      id: test-nerdctl
      if: ${{ !cancelled() }}
      run: |
        export VM_NAME=${{ env.INCUS_CLUSTER }}:${{ env.VM_NAME }}
        export TEST_CMD="cd /root/develop/urunc && PATH=/usr/local/go/bin:$PATH make test_nerdctl"
        if ! incus exec "$VM_NAME" --project ${{ env.INCUS_PROJECT }} -- sh -c "$TEST_CMD"; then
          echo "Test failed"
          echo "CLEANUP_OVERRIDE=false" >> $GITHUB_ENV
          exit 1
        fi

    - name: Run crictl tests
      id: test-crictl
      if: ${{ !cancelled() }}
      run: |
        export VM_NAME=${{ env.INCUS_CLUSTER }}:${{ env.VM_NAME }}
        export TEST_CMD="cd /root/develop/urunc && PATH=/usr/local/go/bin:$PATH make test_crictl"
        if ! incus exec "$VM_NAME" --project ${{ env.INCUS_PROJECT }} -- sh -c "$TEST_CMD"; then
          echo "Test failed"
          echo "CLEANUP_OVERRIDE=false" >> $GITHUB_ENV
          exit 1
        fi

    - name: Run docker tests
      id: test-docker
      if: ${{ !cancelled() }}
      run: |
        export VM_NAME=${{ env.INCUS_CLUSTER }}:${{ env.VM_NAME }}
        export TEST_CMD="cd /root/develop/urunc && PATH=/usr/local/go/bin:$PATH make test_docker"
        if ! incus exec "$VM_NAME" --project ${{ env.INCUS_PROJECT }} -- sh -c "$TEST_CMD"; then
          echo "Test failed"
          echo "CLEANUP_OVERRIDE=false" >> $GITHUB_ENV
          exit 1
        fi
