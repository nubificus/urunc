name: Knative urunc test
on:
  workflow_call:
    inputs:
      runner:
        type: string
        default: '["base", "dind", "2204"]'
      runner-archs:
        type: string
        default: '["amd64"]'
      runner-arch-map:
        type: string
        default: '[{"amd64":"x86_64", "arm64":"aarch64", "arm":"armv7l"}]'
    secrets:
      GIT_CLONE_PAT:
        required: false

  workflow_dispatch:
  
env:
  SSH_USER: 'incus-ci'
  SSH_KEY: '${{ secrets.INCUS_ID_ED25519 }}'
  INCUS_CLUSTER: 'nbfc'
  INCUS_PROJECT: 'nbfc-ci'
  VM_NAME: 'test-vm'
  INCUS_NAME: '${{ github.event.repository.name }}-${{ github.run_id }}-${{ github.run_attempt }}'

jobs:
  prepare:
    name: Knative test
    runs-on: ${{ format('{0}-{1}', join(fromJSON(inputs.runner), '-'), matrix.archconfig) }}
    strategy:
      matrix:
        archconfig: ["${{ fromJSON(inputs.runner-archs) }}"]
      fail-fast: false
    steps:
    - name: Setup Incus remote
      uses: nubificus/incus-remote-setup-action@5580bf31df021cd6cf3266c4383a8ccb448ed7f9
      with:
        ssh_user: ${{ env.SSH_USER }}
        ssh_key: ${{ secrets.INCUS_ID_ED25519 }}
        remote_host: ${{ secrets.INCUS_IP_ADDR }}
        friendly_name: ${{ env.INCUS_CLUSTER }}
        incus_client_name: '${{ env.INCUS_NAME }}'
        cleanup: false
    
    - name: Generate Names
      id: generate-names
      uses: boonya/gh-action-name-generator@v1
      with:
        separator: '-'
        length: 2
        style: 'lowerCase'

    - name: Set VM name
      id: set-vm-name
      run: |
        echo "VM_NAME=${{ github.event.repository.name }}-knative-${{ steps.generate-names.outputs.name }}" >> $GITHUB_ENV

    - name: Launch VM
      id: launch-vm
      uses: nubificus/incus-launch-vm-action@00e5e2f420e7377f1be706c4546aeb9365169dd7
      with:
        vm_name: '${{ env.VM_NAME }}'
        vm_description: 'CI VM for ${{ github.event.repository.name }} for PR ${{ github.event.pull_request.number }} end-to-end testing'
        incus_remote: ${{ env.INCUS_CLUSTER }}
        incus_image: 'nbfc:f4e9e1e4859e'
        cpu_cores: '4'
        memory: '4' # size in GiB
        disk_size: '20' # size in GiB
        incus_profile: 'urunc-ci'
        incus_project: ${{ env.INCUS_PROJECT }}
        incus_target: 'base01'
        cleanup: 'true'
        snapshot: 'false'

    - name: Prepare VM
      id: prepare-vm
      run: |
        export VM_NAME="${{ env.INCUS_CLUSTER }}:${{ env.VM_NAME }}"
        export INCUS_RUN="incus exec $VM_NAME --project ${{ env.INCUS_PROJECT }} -- sh -c "
        $INCUS_RUN 'timeout=30; while fuser /var/lib/apt/lists/lock >/dev/null 2>&1; do echo "Waiting for lock..."; sleep 1; timeout=$((timeout - 1)); if [ "$timeout" -le 0 ]; then break; fi; done; sudo apt-get update'
        $INCUS_RUN "apt-get install -y curl wget"

    - name: Install k3s, knative, urunc
      id: setup-urunc
      run: |
        export VM_NAME="${{ env.INCUS_CLUSTER }}:${{ env.VM_NAME }}"
        export INCUS_RUN="incus exec $VM_NAME --project ${{ env.INCUS_PROJECT }} -- sh -c "
        $INCUS_RUN "rm -f /usr/local/bin/urunc"
        $INCUS_RUN "curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC='--flannel-backend=none ' sh -s -   --disable-network-policy   --disable \"servicelb\"      --disable \"metrics-server\" --cluster-cidr \"10.244.32.0/19\" --service-cidr \"10.244.0.0/19\""
        $INCUS_RUN "kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.28.0/manifests/tigera-operator.yaml"
        $INCUS_RUN "wget https://raw.githubusercontent.com/projectcalico/calico/v3.28.0/manifests/custom-resources.yaml"
        $INCUS_RUN "sed -i.bak \"s|192\.168\.0\.0/16|10\.244\.32\.0/19|g\" custom-resources.yaml"
        $INCUS_RUN "cat custom-resources.yaml"
        $INCUS_RUN "kubectl apply -f custom-resources.yaml"
        $INCUS_RUN "kubectl apply -f https://raw.githubusercontent.com/nubificus/urunc/main/deployment/urunc-deploy/urunc-rbac/urunc-rbac.yaml"
        $INCUS_RUN "kubectl apply -k https://github.com/nubificus/urunc//deployment/urunc-deploy/urunc-deploy/overlays/k3s?ref=main"
        $INCUS_RUN "kubectl apply -f https://raw.githubusercontent.com/nubificus/urunc/refs/heads/main/deployment/urunc-deploy/runtimeclasses/runtimeclass.yaml"
        $INCUS_RUN "wget https://s3.nbfc.io/knative/knative-v1.17.0-urunc-5220308.yaml"
        $INCUS_RUN "kubectl create -f knative-v1.17.0-urunc-5220308.yaml || true"
        $INCUS_RUN "kubectl create -f knative-v1.17.0-urunc-5220308.yaml || true"
        $INCUS_RUN "kubectl apply -f https://github.com/knative/net-kourier/releases/latest/download/kourier.yaml"
        $INCUS_RUN "kubectl wait --for=condition=Ready pods --all -n knative-serving --timeout=300s"
        $INCUS_RUN "kubectl wait --for=condition=Ready pods --all -n kourier-system --timeout=300s"
        $INCUS_RUN "kubectl patch configmap/config-network -n knative-serving --type merge -p '{\"data\":{\"ingress.class\":\"kourier.ingress.networking.knative.dev\"}}'" 
        $INCUS_RUN "kubectl patch configmap/config-domain -n knative-serving --type merge -p '{\"data\":{\"127.0.0.1.nip.io\":\"\"}}'"
        $INCUS_RUN "kubectl patch configmap/config-features --namespace knative-serving --type merge --patch '{\"data\":{ \"kubernetes.podspec-affinity\":\"enabled\", \"kubernetes.podspec-runtimeclassname\":\"enabled\", \"kubernetes.podspec-nodeselector\":\"enabled\" }}'"

        $INCUS_RUN "kubectl get svc kourier-internal -n kourier-system -o=jsonpath='{.spec.clusterIP}' > /tmp/kourier-host"

    - name: Deploy knative function
      id: test-generic-function
      run: |
        export VM_NAME=${{ env.INCUS_CLUSTER }}:${{ env.VM_NAME }}
        export TEST_CMD="kubectl apply -f https://raw.githubusercontent.com/nubificus/c-httpreply/refs/heads/main/service.yaml"
        if ! incus exec "$VM_NAME" --project ${{ env.INCUS_PROJECT }} -- sh -c "$TEST_CMD"; then
          echo "service creation failed"
          echo "CLEANUP_OVERRIDE=false" >> $GITHUB_ENV
          exit 1
        fi

    - name: Query function
      id: check-generic-function
      run: |
        export VM_NAME=${{ env.INCUS_CLUSTER }}:${{ env.VM_NAME }}
        export TEST_CMD="kubectl get ksvc -A -o wide && kubectl wait --for=condition=Ready ksvc hellocontainerc --timeout=40s"
        if ! incus exec "$VM_NAME" --project ${{ env.INCUS_PROJECT }} -- sh -c "$TEST_CMD"; then
          echo "service query failed"
          echo "CLEANUP_OVERRIDE=false" >> $GITHUB_ENV
          exit 1
        fi


    - name: Run function invocation
      id: test-generic-function-invocation
      if: ${{ !cancelled() }}
      run: |
        export VM_NAME=${{ env.INCUS_CLUSTER }}:${{ env.VM_NAME }}
        export TEST_CMD="cat /tmp/kourier-host | xargs curl -v -H \"Host: hellocontainerc.default.127.0.0.1.nip.io\" "
        if ! incus exec "$VM_NAME" --project ${{ env.INCUS_PROJECT }} -- sh -c "$TEST_CMD"; then
          echo "Test failed"
          echo "CLEANUP_OVERRIDE=false" >> $GITHUB_ENV
          exit 1
        fi    

    - name: Deploy urunc knative function
      id: test-urunc-function
      run: |
        export VM_NAME=${{ env.INCUS_CLUSTER }}:${{ env.VM_NAME }}
        export TEST_CMD="kubectl apply -f https://raw.githubusercontent.com/nubificus/app-httpreply/refs/heads/feat_generic/service.yaml"
        if ! incus exec "$VM_NAME" --project ${{ env.INCUS_PROJECT }} -- sh -c "$TEST_CMD"; then
          echo "service creation failed"
          echo "CLEANUP_OVERRIDE=false" >> $GITHUB_ENV
          exit 1
        fi

    - name: Query function
      id: check-urunc-function
      run: |
        export VM_NAME=${{ env.INCUS_CLUSTER }}:${{ env.VM_NAME }}
        export TEST_CMD="kubectl get ksvc -A -o wide && kubectl wait --for=condition=Ready ksvc hellounikernelfc --timeout=40s"
        if ! incus exec "$VM_NAME" --project ${{ env.INCUS_PROJECT }} -- sh -c "$TEST_CMD"; then
          echo "service query failed"
          echo "CLEANUP_OVERRIDE=false" >> $GITHUB_ENV
          exit 1
        fi


    - name: Run function invocation
      id: test-urunc-function-invocation
      if: ${{ !cancelled() }}
      run: |
        export VM_NAME=${{ env.INCUS_CLUSTER }}:${{ env.VM_NAME }}
        export TEST_CMD="cat /tmp/kourier-host | xargs curl -v -H \"Host: hellounikernelfc.default.127.0.0.1.nip.io\" "
        if ! incus exec "$VM_NAME" --project ${{ env.INCUS_PROJECT }} -- sh -c "$TEST_CMD"; then
          echo "Test failed"
          echo "CLEANUP_OVERRIDE=false" >> $GITHUB_ENV
          exit 1
        fi
